/*! For license information please see bundle.js.LICENSE.txt */
(()=>{"use strict";var e={907:(e,t,r)=>{r.r(t),r.d(t,{default:()=>b});function n(e){return Math.round(o(e))}function o(e){return 1200/e}function i(e,t){return void 0===t&&(t=e),Math.round(7*s(e,t))}function s(e,t){return o(e)*function(e,t){return(50*e-31*t)/(19*t)}(e,t)}void 0===String.prototype.trim&&(String.prototype.trim=function(){return String(this).replace(/^\s+|\s+$/g,"")});var a={},u={},c={"<AA>":".-.-","<AR>":".-.-.","<AS>":".-...","<BK>":"-...-.-","<BT>":"-...-","<CL>":"-.-..-..","<CT>":"-.-.-","<DO>":"-..---","<KN>":"-.--.","<SK>":"...-.-","<VA>":"...-.-","<SN>":"...-.","<VE>":"...-.","<SOS>":"...---..."},p={},h={};for(var l in a)h[l]=a[l],u[a[l]]=l,p[a[l]]=l;for(var f in c)h[f]=c[f],p[c[f]]=f;var m,d=function(e){return(e=(e=(e=(e=(e=(e=e.replace(/\|/g,"/")).replace(/\//g," / ")).replace(/\s+/g," ")).replace(/(\/ )+\//g,"/")).replace(/_/g,"-")).replace(/^\s+/,"")).replace(/\s+$/,"")},g=function(){function e(e){void 0===e&&(e=!0),this.useProsigns=e,this.input="",this.output="",this.morse="",this.message="",this.inputWasMorse=void 0,this.hasError=void 0}return e.prototype.translate=function(e,t){var r;if(void 0===t&&(t=function(e){return null!==(e=d(e)).match(/^[/.-][ /.-]*$/)}(e)),t?(this.inputWasMorse=!0,r=function(e,t){void 0===t&&(t=!0);var r={morse:"",message:"",hasError:!1};if(""===(e=d(e)))return r;var n,o,i,s=e.split(" ");n=t?p:u;for(var a=0;a<s.length;a++)void 0===(o=n[i=s[a]])?(r.morse+="#"+i+"# ",r.message+="#",r.hasError=!0):(r.morse+=i+" ",r.message+=o);return r.morse=r.morse.slice(0,r.morse.length-1),r}(e,this.useProsigns)):(this.inputWasMorse=!1,r=function(e,t){void 0===t&&(t=!0);var r={morse:"",message:"",hasError:!1};if(""===(e=function(e){return(e=(e=e.toUpperCase()).trim()).replace(/\s+/g," ")}(e)))return r;for(var n,o,i,s,u,c,p=[];e.length>0;)o=1,t&&(n=e.match(/^<...?>/))&&(o=n[0].length),p.push(e.slice(0,o)),e=e.slice(o,e.length);for(i=t?h:a,s=0;s<p.length;s++)void 0===(u=i[c=p[s]])?(r.message+="#"+c+"#",r.morse+="# ",r.hasError=!0):(r.message+=c,r.morse+=u+" ");return r.morse=r.morse.slice(0,r.morse.length-1),r}(e,this.useProsigns)),this.morse=r.morse,this.message=r.message,this.inputWasMorse?(this.input=this.morse,this.output=this.message):(this.input=this.message,this.output=this.morse),this.hasError=r.hasError,this.hasError)throw new Error("Error in input");return this.output},e.prototype.clearError=function(){this.inputWasMorse||(this.message=this.message.replace(/#[^#]*?#/g,"")),this.morse=this.morse.replace(/#/g,""),this.hasError=!1},e}(),v=(m=function(e,t){return m=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},m(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}m(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});const b=function(e){function t(t,r,n){void 0===t&&(t=!0),void 0===r&&(r=20),void 0===n&&(n=r);var o=e.call(this,t)||this;return o.wpm=r,o.fwpm=n,o}return v(t,e),Object.defineProperty(t.prototype,"wpm",{get:function(){return this._wpm},set:function(e){this._wpm=e,e<this._fwpm&&(this._fwpm=e)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"fwpm",{get:function(){return this._fwpm},set:function(e){this._fwpm=e,e>this._wpm&&(this._wpm=e)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"wordSpace",{get:function(){return i(this._wpm,this._fwpm)},enumerable:!1,configurable:!0}),t.prototype.getTimings=function(){return t.getTimingsGeneral(n(this._wpm),(e=this._wpm,Math.round(3*o(e))),function(e){return n(e)}(this._wpm),function(e,t){return void 0===t&&(t=e),Math.round(3*s(e,t))}(this._wpm,this._fwpm),i(this._wpm,this._fwpm),this.morse);var e},t.getTimingsGeneral=function(e,t,r,n,o,i){i=(i=i.replace(/ \/ /g,"/")).replace(/([\.\-])(?=[\.\-])/g,"$1+");for(var s=[],a=0;a<i.length;a++)switch(i[a]){case".":s.push(e);break;case"-":s.push(t);break;case"+":s.push(-r);break;case" ":s.push(-n);break;case"/":s.push(-o)}return s},t.prototype.getDuration=function(){for(var e=this.getTimings(),t=0,r=0;r<e.length;r++)t+=Math.abs(e[r]);return t},t}(g)},871:function(e,t,r){var n,o=this&&this.__extends||(n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},n(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0});var i=function(e){function t(t,r,n,o,i){void 0===t&&(t=!0),void 0===r&&(r=20),void 0===n&&(n=20),void 0===o&&(o=550),void 0===i&&(i=8e3);var s=e.call(this,t,r,n)||this;return s.frequency=o,s.sampleRate=i,s}return o(t,e),t.prototype.getSample=function(e){return void 0===e&&(e=0),t.getSampleGeneral(this.getTimings(),this.frequency,this.sampleRate,e)},t.getSampleGeneral=function(e,t,r,n){void 0===n&&(n=0);var o=[];if(0===e.length)return[];e.push(-Math.max(5,n));for(var i,s,a=1.5*t/r,u=Math.SQRT1_2,c=Math.sin(2*Math.PI*a),p=Math.cos(2*Math.PI*a),h=c/(2*Math.pow(10,u/20)),l=1+h,f=.5*(1-p)/l,m=(1-p)/l,d=.5*(1-p)/l,g=-2*p/l,v=(1-h)/l,b=2*Math.PI*t/r,y=e[0]>0?1:0,w=0,_=0,S=0,M=0,O=0;O<e.length;O+=1){for(var P=r*Math.abs(e[O])/1e3,k=0;k<P;k+=1)s=f*(i=y*Math.sin(k*b))+m*w+d*_-g*S-v*M,o.push(.813*s),_=w,w=i,M=S,S=s;y=1-y}return o},t.prototype.getWAASample=function(e){void 0===e&&(e=0),e=Math.max(5,e);var t=this.getTimings();t.push(-e);var r=window.OfflineAudioContext||window.webkitOfflineAudioContext;if(void 0===r)throw new Error("No OfflineAudioContext class defined");var n=new r(1,this.sampleRate*(this.getDuration()+e)/1e3,this.sampleRate),o=n.createGain();o.gain.setValueAtTime(.813,0);var i=n.createBiquadFilter();i.type="lowpass",i.frequency.setValueAtTime(1.1*this.frequency,0),o.connect(i),i.connect(n.destination);for(var s,a,u=0,c=0;c<t.length;c++)a=Math.abs(t[c])/1e3,t[c]>0&&((s=n.createOscillator()).type="sine",s.frequency.setValueAtTime(this.frequency,u),s.start(u),s.stop(u+a),s.connect(o)),u+=a;return n.startRendering().then((function(e){return e.getChannelData(0)}))},t}(r(907).default);t.default=i},329:(e,t)=>{t.Yu=void 0;var r=function(e){return[255&e,e>>8&255,e>>16&255,e>>24&255]},n=function(e){return[255&e,e>>8&255]};t.Yu=function(e,t,o){void 0===t&&(t=8e3),void 0===o&&(o=8),e=function(e){for(var t=[],r=0;r<e.length;r++)t[r]=Math.max(Math.min(128+Math.round(127*e[r]),255),0);return t}(e);var i={chunkId:[82,73,70,70],chunkSize:0,format:[87,65,86,69],subChunk1Id:[102,109,116,32],subChunk1Size:16,audioFormat:1,numChannels:1,sampleRate:t,byteRate:0,blockAlign:0,bitsPerSample:o,subChunk2Id:[100,97,116,97],subChunk2Size:0};return i.blockAlign=i.numChannels*i.bitsPerSample>>3,i.byteRate=i.blockAlign*i.sampleRate,i.subChunk2Size=e.length*(i.bitsPerSample>>3),i.chunkSize=36+i.subChunk2Size,i.chunkId.concat(r(i.chunkSize),i.format,i.subChunk1Id,r(i.subChunk1Size),n(i.audioFormat),n(i.numChannels),r(i.sampleRate),r(i.byteRate),n(i.blockAlign),n(i.bitsPerSample),i.subChunk2Id,r(i.subChunk2Size),16==i.bitsPerSample?function(e){for(var t=[],r=0,n=e.length,o=0;o<n;o++)t[r++]=255&e[o],t[r++]=e[o]>>8&255;return t}(e):e)}}},t={};function r(n){var o=t[n];if(void 0!==o)return o.exports;var i=t[n]={exports:{}};return e[n].call(i.exports,i,i.exports,r),i.exports}r.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return r.d(t,{a:t}),t},r.d=(e,t)=>{for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e=r(871),t=r.n(e),n=r(329);console.log("Hello World2");var o=new Audio;window.doPlay=function(e,r,i,s){var a=1200/i;console.log(a);var u=7*a,c=new(t())(!0,r,i,550,8e3);c.translate(e,!1);var p=n.Yu(c.getSample(u));o=null,o=new Audio;var h=new Int8Array(p).buffer,l=window.URL.createObjectURL(new Blob([h]));o.src=l,o.addEventListener("ended",(function(){s()})),o.play()},window.doPause=function(e){o.addEventListener("pause",(function(){e()})),console.log("ended:"+o.ended),o.ended||o.paused||!o.src?e():o.pause()}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,